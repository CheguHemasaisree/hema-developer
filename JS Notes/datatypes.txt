Datatypes:-javascript is dynamically typed language that means variables dosen't have any data types.Data types of variables changes from one data type to another Datatypes

eg:-
let a=5;
console.log(typeof a); //number

let a="prasad";
console.log(typeof a); //string

let a=true;
console.log(typeof a); //boolean

*javascript is a case senstive language
*browsers of js engine will automatically insert the semicolon where there is no semicolon present

javascript can even change the datatypes implict called implicti type casting
eg:-
let a=5+"5";
console.log(a, typeof a); //55,string

let a="prasad"+2;
console.log(a, typeof a); //prasad2 string

let a=1+true;
console.log(a, typeof a); //2,number

javascript datatypes are divided into two categories
1.primitive datatypes
2.non-primitive datatypes

1.Primitive data types:-primitive data types are are the basic data types which are used to store certain value.There are 5 different data types
i.number
ii.string
iii.boolean
iv.undefined
v.null

i.Number:Number is used to represent any numerical values.
  * it contains constants like infinity and in the times when number is expected but not able to retun it goes to "NAN(not a number)"
  * it contains some default methods like
  *tofixed(n)-returns number with n number of digits after decimal (or) it returns string with nu number of digits after decimal
  *tostring(n)-returns a string of number with base n 
  *there are ways to convert any value 'n' to number like

eg:-
let p=25-'p';
console.log(p,typeof p); //nan number
p=5.4123;
console.log(p.toFixed(2)); //5.41
p=25;
console.log(p.toString(2)); //11001 -- string
p=5+ + '5';
console.log(p); //10 -- number

  * There are so many math methods avaliable by math library
eg:-
console.log(Math.sqrt(16)); //4 -- squareroot
console.log(Math.cbrt(27)); //3 -- cube root
console.log(Math.abs(-10)); //10 --absolute
console.log(Math.max(5,1,3,4,6)); //6 -- maximum
console.log(Math.min(3,4,2,1,8)); //1 -- minimum
console.log(Math.ceil(4.1)); //5 -- ceiling
console.log(Math.floor(4.8)); //4 -- floor
console.log(Math.round(4.8)); //5 -- round
console.log(Math.random()); //0.4068932579918074 -- returns a random number between 0 to 1(generates a random number between 0 to1 after evey refresh)
console.log(Math.random()*1000); //656.5240493810276 -- after generating the random numer we are multiplying that number with 1000
console.log(Math.round(Math.random()*1000)); //675 -- after generating the random number we are multyplying the random number with 1000 and rounding of that number
console.log(Math.pow(2,3)); //8 -- power
console.log(Math.pow(2,3), 2**3) //8,8 --power can also be return in this way also

ii.Strings:Strings are used to represent combination of alphabets,digits,symbols etc
   * it can be represented in '' (or) "" (or) ``
   eg:-
        let q="prasad";
        console.log(typeof q,q); //string prasad
                          or
        let q="prasad" or 'prasad' or `prasad`
        console.log(typeofq,q); //string prasad
    * there is no difference between single quote and double quote
    eg:-
    q=25;
    console.log("the value of q is q"); //the value of q is q
    console.log("the value of q is" + q); //the value of q is 25
    console.log(`the value of q is $ {q}`); //25

    * the usage of backticks for string is called template literal.It is used for writing dynamic strings   without breaking the string
    eg:-
    let cost = 4, tax = 5,quantity=10
    console.log(`The Total of buying ${quantity} apples with 
    each cost ${cost} is ${quantity * cost} but also adds
    the tax of ${tax} is ${(tax/100)*(cost*quantity)} `);

there are so many string methods are avaliable such abs
length -- returns length no:of characters in given string
array -- string values starts with zero index
concatenation -- string values starts with zero index
uppercase -- converts to uppercase
lowecase -- converts to lowercase
startswith -- checks wheather it starts with the given string or not and returns boolean
endswith -- checks wheather it ends with given string or not and returns boolean
indexof -- returns indexof of first occurance of given value,last occurance of given value
split -- divides the string based on delimiter and returns array
slice -- retuens part of the string
trim -- returns string after removing space at start and end of string
eg:-
let str="prasad";
console.log(str.length); //6 -- length
console.log(str[0]); //p -- array
console.log(str[0]+str[1]);  //pr -- string concatenation
console.log(str.toUpperCase()); //PRASAD -- uppercase
console.log(str.toLowerCase()); //prasad -- lowercase
console.log(str.startsWith("pr")); //true -- startWith
console.log(str.endsWith("ke"));  //false -- endsWith
console.log(str.indexOf('s')); // 3 -- index of the letter
console.log(str.indexOf('a')); //2
console.log(str.indexOf('a'), str.lastIndexOf('a')); //2 4
console.log(str.indexOf('a',3),str.lastIndexOf('a')); //4 4
str="js is so easy";
console.log(str.split(' ')); //['js', 'is', 'so', 'easy'] -- split
console.log(str.split('')); //['j', 's', ' ', 'i', 's', ' ', 's', 'o', ' ', 'e', 'a', 's', 'y']
console.log(str.slice(2,5)); //is
console.log("      prasad      " .trim()); //prasad -- trim
console.log("    durga   Prasad    ".trim()); //durga parasd

iii.Boolean:boolean returns true or false true menas returns 1 false means returns 0 mostly performed on conditions

iv.undefined:undefined represents accidental absence of value
eg:-
let k;
console.log(k);  // undefined
console.log(k,typeof k); // undefined 'undefined'
console.log(z); //error

v.Null:null represents intentional absence of values
eg:-
let n=null;
console.log(n);
* in javascript it is possible to access values before declaration called hoisting it is not possible with let and const
eg:-
console.log(m); //undefined
var m=5;


2.non-primitive-datatypes:these datatypes also called referenced data tupes they are
i.functions
ii.arrays
iii.objects



   

